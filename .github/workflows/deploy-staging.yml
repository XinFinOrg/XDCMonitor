name: Deploy to Staging

on:
  workflow_run:
    workflows: ['XDC Monitor CI']
    branches: [staging]
    types: [completed]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Manual SSH setup
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
        run: |
          # Create SSH directory first
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write the private key to a file
          echo "Writing SSH key to file..."
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ls -la ~/.ssh || echo "Failed to list SSH directory"

          # Start the SSH agent manually
          echo "Starting SSH agent..."
          eval "$(ssh-agent -s)"

          # Check if key file exists and has content
          if [ -s ~/.ssh/id_ed25519 ]; then
            echo "SSH key file exists and has content"
          else
            echo "ERROR: SSH key file is empty or doesn't exist"
            ls -la ~/.ssh/
          fi

          ssh-add ~/.ssh/id_ed25519 || echo "Failed to add key to agent: $?"

          # Validate key format
          echo "Validating SSH key format..."
          ssh-keygen -l -f ~/.ssh/id_ed25519 && echo "Key format appears valid" || echo "Key format invalid"

          # Show beginning of key (safely)
          echo "Key begins with:"
          head -n 1 ~/.ssh/id_ed25519
          echo "Key ends with:"
          tail -n 1 ~/.ssh/id_ed25519
          echo "Key length in bytes:"
          wc -c ~/.ssh/id_ed25519
          echo "Line count:"
          wc -l ~/.ssh/id_ed25519

          # Additional validation
          if grep -q "BEGIN .* PRIVATE KEY" ~/.ssh/id_ed25519; then
            echo "Key has proper header"
          else
            echo "ERROR: Key lacks proper header!"
          fi

          if grep -q "END .* PRIVATE KEY" ~/.ssh/id_ed25519; then
            echo "Key has proper footer"
          else
            echo "ERROR: Key lacks proper footer!"
          fi

          # Setup SSH config to use the correct port and skip host checking
          echo "Host $STAGING_HOST" > ~/.ssh/config
          echo "    User $STAGING_USER" >> ~/.ssh/config
          echo "    Port 1122" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "    LogLevel DEBUG3" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

          # Debug information
          echo "SSH key loaded. Checking connection..."
          ssh-add -l || echo "No keys in agent"

          # Test the connection
          ssh -v $STAGING_HOST "echo 'SSH CONNECTION SUCCESSFUL'" || echo "Connection failed with code $?"

      - name: Deploy to staging server
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          DEPLOY_PATH: ${{ secrets.STAGING_DEPLOY_PATH || '/home/deploy/xdc-monitor' }}
          INFLUXDB_TOKEN: ${{ secrets.STAGING_INFLUXDB_TOKEN }}
          INFLUXDB_ORG: ${{ secrets.STAGING_INFLUXDB_ORG }}
          INFLUXDB_BUCKET: ${{ secrets.STAGING_INFLUXDB_BUCKET }}
          INFLUXDB_ADMIN_USER: ${{ secrets.STAGING_INFLUXDB_ADMIN_USER }}
          INFLUXDB_ADMIN_PASSWORD: ${{ secrets.STAGING_INFLUXDB_ADMIN_PASSWORD }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.STAGING_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.STAGING_TELEGRAM_CHAT_ID }}
          GRAFANA_ADMIN_USER: ${{ secrets.STAGING_GRAFANA_ADMIN_USER }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.STAGING_GRAFANA_ADMIN_PASSWORD }}
        run: |
          echo "Connecting to staging server..."
          # Using SSH config for simplicity - all options are defined there
          ssh $STAGING_HOST "mkdir -p $DEPLOY_PATH"

          echo "Copying deployment files..."
          scp docker-compose.yml $STAGING_HOST:$DEPLOY_PATH/
          scp run.sh $STAGING_HOST:$DEPLOY_PATH/

          echo "Generating .env file with secrets..."
          cat > env_staging << EOF
          SCAN_INTERVAL=15

          # Monitoring configuration
          ENABLE_RPC_MONITORING=true
          ENABLE_PORT_MONITORING=true
          ENABLE_BLOCK_MONITORING=true
          BLOCK_TIME_THRESHOLD=3.0

          # Alert configuration
          ENABLE_DASHBOARD_ALERTS=true
          ENABLE_CHAT_NOTIFICATIONS=true
          NOTIFICATION_WEBHOOK_URL=

          # Telegram notification configuration
          TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}"
          TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}"

          # Logging configuration
          LOG_LEVEL=info

          # InfluxDB Configuration
          INFLUXDB_URL=http://localhost:8086
          INFLUXDB_TOKEN="${INFLUXDB_TOKEN}"
          INFLUXDB_ORG="${INFLUXDB_ORG}"
          INFLUXDB_BUCKET="${INFLUXDB_BUCKET}"
          INFLUXDB_ADMIN_USER="${INFLUXDB_ADMIN_USER}"
          INFLUXDB_ADMIN_PASSWORD="${INFLUXDB_ADMIN_PASSWORD}"

          # Grafana Admin Credentials
          GRAFANA_ADMIN_USER="${GRAFANA_ADMIN_USER}"
          GRAFANA_ADMIN_PASSWORD="${GRAFANA_ADMIN_PASSWORD}"
          EOF

          echo "Copying the generated .env file to staging server..."
          scp env_staging $STAGING_HOST:$DEPLOY_PATH/.env
          echo "Removing the local copy for security..."
          rm env_staging

          echo "Pulling latest images and restarting services..."
          ssh $STAGING_HOST "cd $DEPLOY_PATH && docker-compose pull && ./run.sh rebuild"

          echo "Deployment to staging completed successfully!"
