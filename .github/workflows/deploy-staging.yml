name: Deploy to Staging

on:
  workflow_run:
    workflows: ['XDC Monitor CI']
    branches: [staging]
    types: [completed]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Debug server connection
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
        run: |
          echo "Checking if server is reachable..."
          # Try ping first (might be blocked by firewall)
          ping -c 1 $STAGING_HOST || echo "Ping failed, but server might still be reachable"
          # Check if custom port 1122 is open
          nc -zv $STAGING_HOST 1122 || echo "Port 1122 connectivity test failed"

      - name: Add host key with timeout
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
        run: |
          mkdir -p ~/.ssh
          # Add option to disable StrictHostKeyChecking for keyscan
          echo "Attempting to scan SSH host key with 10 second timeout on port 1122..."
          timeout 10 ssh-keyscan -H -p 1122 $STAGING_HOST >> ~/.ssh/known_hosts || echo "Host key scan timed out"

          # If keys weren't added, create a backup approach
          if [ ! -s ~/.ssh/known_hosts ]; then
            echo "Host key scanning failed, using StrictHostKeyChecking=no as fallback"
            echo "Host $STAGING_HOST" > ~/.ssh/config
            echo "    Port 1122" >> ~/.ssh/config
            echo "    StrictHostKeyChecking no" >> ~/.ssh/config
            echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
          else
            echo "Host key successfully added to known_hosts"
          fi

      - name: Deploy to staging server
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          DEPLOY_PATH: ${{ secrets.STAGING_DEPLOY_PATH || '/home/deploy/xdc-monitor' }}
          INFLUXDB_TOKEN: ${{ secrets.STAGING_INFLUXDB_TOKEN }}
          INFLUXDB_ORG: ${{ secrets.STAGING_INFLUXDB_ORG }}
          INFLUXDB_BUCKET: ${{ secrets.STAGING_INFLUXDB_BUCKET }}
          INFLUXDB_ADMIN_USER: ${{ secrets.STAGING_INFLUXDB_ADMIN_USER }}
          INFLUXDB_ADMIN_PASSWORD: ${{ secrets.STAGING_INFLUXDB_ADMIN_PASSWORD }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.STAGING_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.STAGING_TELEGRAM_CHAT_ID }}
          GRAFANA_ADMIN_USER: ${{ secrets.STAGING_GRAFANA_ADMIN_USER }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.STAGING_GRAFANA_ADMIN_PASSWORD }}
        run: |
          echo "Connecting to staging server..."
          # Add connection troubleshooting options with port 1122
          ssh -p 1122 -o ConnectTimeout=10 -v $STAGING_USER@$STAGING_HOST "mkdir -p $DEPLOY_PATH"

          echo "Copying deployment files..."
          scp -P 1122 docker-compose.yml $STAGING_USER@$STAGING_HOST:$DEPLOY_PATH/
          scp -P 1122 run.sh $STAGING_USER@$STAGING_HOST:$DEPLOY_PATH/

          echo "Generating .env file with secrets..."
          cat > env_staging << EOF
          SCAN_INTERVAL=15

          # Monitoring configuration
          ENABLE_RPC_MONITORING=true
          ENABLE_PORT_MONITORING=true
          ENABLE_BLOCK_MONITORING=true
          BLOCK_TIME_THRESHOLD=3.0

          # Alert configuration
          ENABLE_DASHBOARD_ALERTS=true
          ENABLE_CHAT_NOTIFICATIONS=true
          NOTIFICATION_WEBHOOK_URL=

          # Telegram notification configuration
          TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}"
          TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}"

          # Logging configuration
          LOG_LEVEL=info

          # InfluxDB Configuration
          INFLUXDB_URL=http://localhost:8086
          INFLUXDB_TOKEN="${INFLUXDB_TOKEN}"
          INFLUXDB_ORG="${INFLUXDB_ORG}"
          INFLUXDB_BUCKET="${INFLUXDB_BUCKET}"
          INFLUXDB_ADMIN_USER="${INFLUXDB_ADMIN_USER}"
          INFLUXDB_ADMIN_PASSWORD="${INFLUXDB_ADMIN_PASSWORD}"

          # Grafana Admin Credentials
          GRAFANA_ADMIN_USER="${GRAFANA_ADMIN_USER}"
          GRAFANA_ADMIN_PASSWORD="${GRAFANA_ADMIN_PASSWORD}"
          EOF

          echo "Copying the generated .env file to staging server..."
          scp -P 1122 env_staging $STAGING_USER@$STAGING_HOST:$DEPLOY_PATH/.env
          echo "Removing the local copy for security..."
          rm env_staging

          echo "Pulling latest images and restarting services..."
          ssh -p 1122 $STAGING_USER@$STAGING_HOST "cd $DEPLOY_PATH && docker-compose pull && ./run.sh rebuild"

          echo "Deployment to staging completed successfully!"
